# -*- coding: utf-8 -*-
"""Copia de edaBienesyRaices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CyxNioVYGQT-xnwBy_1XpmtoYn2nNnV7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.figure_factory as ff
import plotly.express as px
import plotly.subplots as sp
import seaborn as sns
from scipy import stats
import nbformat
from scipy.stats import skew, kurtosis

#Cargando el archivo
url = 'https://media.githubusercontent.com/media/spamella04/Datasets/refs/heads/main/realtor-data.zip.csv'
data = pd.read_csv(url)

data.shape

data.info()

#Analisis Exploratorio

#Estadisticas Iniciales
mean_price = data['price'].mean()
median_price = data['price'].median()
std_price = data['price'].std()

print(f"Media: {mean_price}, Mediana: {median_price}, Desviación estándar: {std_price}")

#Identificacion de outliers
outliers_columns = ['price', 'house_size', 'acre_lot']
bed_bath = ['bed', 'bath']

fig = px.box(data,
              y=outliers_columns,
              title="Boxplots para Detectar Outliers",
              labels={'value': 'Valor', 'variable': 'Características'},
              height=600, width=800)


fig.update_layout(xaxis_title="Características",
                  yaxis_title="Valor")

fig.show()

fig = px.box(data,
              y=bed_bath,
              title="Boxplots para Detectar Outliers",
              labels={'value': 'Valor', 'variable': 'Características'},
              height=600, width=800)


fig.update_layout(xaxis_title="Características",
                  yaxis_title="Valor")

fig.show()

data.describe()

# Filtrar los registros con más de 5 habitaciones o más de 5 baños
bed__bath_mayor_5 = data[(data['bed'] > 5) & (data['bath'] > 5)]
bed__bath_mayor_5 = len(bed__bath_mayor_5)


# Mostrar el resultado
print(f"Cantidad de registros con más de 5 habitaciones o más de 5 baños: {bed__bath_mayor_5 }")

"""Los datos del dataset son recolectados de un sitio web anuncios inmobiliarios operado por Move, Inc., subsidiaria de News Corp, y con sede en Santa Clara, California. Permite a mas de 100 millones de usuarios activos mensualmente buscar propiedades con un numero maximo de 5 habitacion y 5 baños."""



new_data = data[(data['bed'] <= 5) & (data['bath'] <= 5)]

"""Los registros que se han encontrado en el actual datasset que poseen informacion con propiedades de hasta 300 habitaciones u 800 baños no son considerados el mercado tipico, por ende, estos registros son eliminados. Se crea una nueva copia del dataset, omitiendo estos registros."""

new_data.shape

#Eliminando columnas no relavantes para el analisis

new_data.drop('brokered_by', axis=1, inplace=True)
new_data.drop('prev_sold_date', axis=1, inplace=True)

#Nueva columna

"""La nueva variable de clasificación por zip_code se creó para identificar y categorizar propiedades en función de su ubicación geográfica, ya que esta variable pude inlfuir significativamente en los precios de las propiedades."""

avg_price_by_zip = new_data.groupby('zip_code')['price'].mean().reset_index()
avg_price_by_zip.columns = ['zip_code', 'avg_price']

avg_price_by_zip['price_group'] = pd.qcut(avg_price_by_zip['avg_price'], 5, labels=[1, 2, 3, 4, 5])

zip_group_mapping = dict(zip(avg_price_by_zip['zip_code'], avg_price_by_zip['price_group']))

new_data['price_group'] = new_data['zip_code'].map(zip_group_mapping)

print(new_data[['zip_code', 'price_group']].head())



#Outliers en el nuevo dataframe

#  Z-scores para la columna 'price'

price_non_null = new_data['price'].dropna()


z_scores_price = stats.zscore(price_non_null)
abs_z_scores_price = np.abs(z_scores_price)


outliers_price = abs_z_scores_price > 3

outlier_indices = price_non_null.index[outliers_price]
df_outliers_price = new_data.loc[outlier_indices]


num_outliers_price = len(df_outliers_price)
print(f"Número de outliers en 'price': {num_outliers_price}")


print(df_outliers_price)

new_data = new_data.drop(outlier_indices)

#Outlier por ubicacion geografica
fig_bed = px.scatter(new_data,
                     x='price_group',
                     y='price',
                     title='Precio vs. price_group',
                     labels={'price_group': 'Price Group', 'price': 'Precio'},
                     hover_data=['price_group', 'price'],
                     color_discrete_sequence=['blue'])
fig_bed.show()

#Variable bed
fig_bed = px.scatter(new_data,
                     x='bed',
                     y='price',
                     title='Precio vs. Número de Habitaciones',
                     labels={'bed': 'Número de Habitaciones', 'price': 'Precio'},
                     hover_data=['bed', 'price'],
                     color_discrete_sequence=['blue'])
fig_bed.show()

#Variable bath
fig_bed = px.scatter(new_data,
                     x='bath',
                     y='price',
                     title='Precio vs. Número de Baños',
                     labels={'bath': 'Número de Baños', 'price': 'Precio'},
                     hover_data=['bath', 'price'],
                     color_discrete_sequence=['blue'])
fig_bed.show()

#Variable acre_lot
fig_bed = px.scatter(new_data,
                     x='acre_lot',
                     y='price',
                     title='Precio vs. Tamaño de la propiedad/terreno',
                     labels={'acre_lot': 'Tamaño de la propiedad/terreno', 'price': 'Precio'},
                     hover_data=['acre_lot', 'price'],
                     color_discrete_sequence=['blue'])
fig_bed.show()

new_data = new_data = new_data[~(
    (new_data['price'] >= 4000000) & (new_data['acre_lot'] >= 900000))]

#Variable house_size
fig_bed = px.scatter(new_data,
                     x='house_size',
                     y='price',
                     title='Precio vs. Espacio habitable en pies cuadrados',
                     labels={'house_size': 'espacio habitable en pies cuadrados', 'price': 'Precio'},
                     hover_data=['house_size', 'price'],
                     color_discrete_sequence=['blue'])
fig_bed.show()

new_data = new_data[new_data['house_size'] < 1000000]

#Identificando valores nulos

variables_null=new_data.isnull().sum()
fig = px.bar(x=variables_null.index.values, y=variables_null.values,text_auto=True,height=500,width=600)
fig.update_layout(title="Variables con valores nulos",
                 xaxis_title="Columnas",
                 yaxis_title="Count")
fig.update_xaxes(tickangle=70)
fig.show()

#Verificar duplicados
new_data.duplicated().sum()
new_data.drop_duplicates(inplace=True)

new_data = new_data[new_data['price'] > 0]

data_cleaned = new_data.dropna()

data_cleaned.shape

data_cleaned.describe()

# Histograma de precios
fig_histogram = px.histogram(data_cleaned,
                              x='log_price',
                              title='Distribución de Precios de Propiedades',
                              labels={'price': 'Precio'},
                              nbins=50)
fig_histogram.show()

# Histograma de precios
fig_histogram = px.histogram(data_cleaned,
                              x='price',
                              title='Distribución de Precios de Propiedades',
                              labels={'price': 'Precio'},
                              nbins=50)
fig_histogram.show()

# Asimetría y curtosis para la variable price
print('Asimetria Pricee:', skew(data_cleaned['price']))
print('Curtosis Price :', kurtosis(data_cleaned['price']))

data_cleaned['log_price'] = np.log1p(data_cleaned['price'])

# Asimetría y curtosis para la variable log_price
print('Asimetria Pricee:', skew(data_cleaned['log_price']))
print('Curtosis Price :', kurtosis(data_cleaned['log_price']))

"""En el análisis del mercado de bienes raíces, observamos que la distribución de precios presenta una asimetría positiva significativa. Esto indica que la mayoría de las propiedades se agrupan en rangos de precios más bajos o medios, mientras que un pequeño número de propiedades de lujo, con precios extremadamente altos

Asimetría positiva (mayor que 0): La distribución tiene una cola más larga hacia la derecha, lo que indica que hay algunos valores muy grandes que están "tirando" la media hacia la derecha (distribución sesgada a la derecha).

Curtosis mayor que 3 (leptocúrtica): La distribución tiene un apuntamiento mayor al de una normal, lo que indica que hay más valores extremos (outliers) concentrados en los bordes.
"""

#Matriz de Correlacion
numeric_columns = data_cleaned.select_dtypes(include=['float64', 'int64'])

correlation_matrix = numeric_columns.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Matriz de Correlación de Variables Numéricas en el Mercado de Bienes Raíces')
plt.show()

price_group_mean = data_cleaned.groupby('price_group')['price'].mean().reset_index()
print(price_group_mean)

#Media de precios por grupo
fig = px.bar(price_group_mean,
             x=price_group_mean.columns[0],
             y='price',
             title='Media de Precios por Grupo de Precio',
             labels={price_group_mean.columns[0]: 'Grupo de Precio', 'price': 'Media de Precios'},
             color=price_group_mean.columns[0],
             color_continuous_scale=px.colors.sequential.Viridis)

fig.show()

#Top 3 ciudades por grupo de precios
city_price_group = data_cleaned.groupby(['price_group', 'city'])['price'].mean().reset_index()

city_price_group_sorted = city_price_group.sort_values(by=['price_group', 'price'], ascending=[True, False])
top_3_cities_per_group = city_price_group_sorted.groupby('price_group').head(3)
print(top_3_cities_per_group)

fig = px.bar(top_3_cities_per_group,
             x='city',
             y='price',
             color='price_group',
             barmode='group',
             title='Top 3 Ciudades por Grupo de Precio',
             labels={'city': 'Ciudad', 'price': 'Media de Precios', 'price_group': 'Grupo de Precio'},
             height=600)


fig.show()

#Media de baños y habitacion por agrupacion de codigo postal y al grupo de precio que peretence
bed_bath_group = data_cleaned.groupby('price_group')[['bed', 'bath']].mean().reset_index()
print(bed_bath_group)

fig_bed = px.bar(bed_bath_group,
                 x='price_group',
                 color='price_group',
                 y='bed',
                 title='Media de Habitaciones por Grupo de Precio',
                 labels={'price_group': 'Grupo de Precio', 'bed': 'Media de Habitaciones'},
                 height=400)

fig_bath = px.bar(bed_bath_group,
                  x='price_group',
                  color='price_group',
                  y='bath',
                  title='Media de Baños por Grupo de Precio',
                  labels={'price_group': 'Grupo de Precio', 'bath': 'Media de Baños'},
                  height=400)


fig_bed.show()
fig_bath.show()

#Media de house_size
house_size_group = data_cleaned.groupby('price_group')[['house_size']].mean().reset_index()
print(house_size_group)

fig = px.bar(house_size_group,
             x='house_size',
             y='price_group',
             color='price_group',
             barmode='group',
             title='Media de tamaño de las casas por grupo de precio',
             labels={'house_size': 'house_size', 'price': 'Media de Precios', 'price_group': 'Grupo de Precio'},
             height=600)


fig.show()